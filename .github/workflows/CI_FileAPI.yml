# Workflow to deploy and test Files API to the CI server
name: OGD FileAPI - CI Script
run-name: ${{ format('{0} - {1}', github.workflow, github.event_name == 'push' && github.event.head_commit.message || 'Manual Run') }}
on:
  workflow_dispatch:
  push:
    paths:
    - '.github/workflows/FileAPI_CI.yml'
    - '.github/actions/**'
    - 'src/**'
    - 'requirements.txt'

env:
  DEPLOY_HOST: ${{ vars.OGD_STAGING_HOST }}
  DEPLOY_DIR:                              ${{ vars.API_BASE_PATH }}/${{ github.event.repository.name }}/${{ github.ref_name }}
  DEPLOY_URL:  ${{ vars.OGD_STAGING_HOST }}/${{ vars.API_BASE_URL }}/${{ github.event.repository.name }}/${{ github.ref_name }}/app.wsgi

jobs:
  ci_deploy:
    name: CI Deploy of Website API
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
      cancel-in-progress: true

    steps:

    # 1. Local checkout & config
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Config File
      uses: ./.github/actions/FileAPI_config
      with:
          api_base: ${{ env.DEPLOY_DIR }}

    # 2. Build 

    # 3. Remote config & deploy
    - name: Install OpenConnect
      run: sudo apt-get -q update && sudo apt-get -q install openconnect
    - name: Connect VPN
      run: echo ${{ secrets.VPN_PASS }} | sudo openconnect --protocol=gp -u ${{ secrets.VPN_USER }} --passwd-on-stdin soe.vpn.wisc.edu &

    - name: Setup Access Key
      run: |
        mkdir -p ~/.ssh
        echo '${{ secrets.DEPLOY_KEY }}' >> ./key.txt
        chmod 600 ./key.txt
    - name: Ensure directory exists
      run: ssh -o StrictHostKeyChecking=no -T -i ./key.txt ${{ secrets.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "mkdir -p ${{ env.DEPLOY_DIR }}"

    - name: Upload to web server via rsync
      uses: burnett01/rsync-deployments@5.2
      with:
        # switches:
        # -v : verbose output
        # -r : recurse into subdirectories
        # -c : use checksum to determine what files to update/skip
        # -t : preserve modification times
        # --delete : delete extraneous files from destination directories
        # --exclude-from : skip any files in rsync-exclude
        # --chmod : For each directory (D) and file (F), give user (u) and group (g) rwx permissions.
        #           Give others (o) only read permissions, plus execute for directories.
        switches: -vrct --delete --exclude-from 'rsync-exclude' --chmod=Du=rwx,Dg=rwx,Do=rx,Fu=rwx,Fg=rwx,Fo=r
        path: ./src/*
        remote_path: ${{ env.DEPLOY_DIR }}
        remote_host: ${{ env.DEPLOY_HOST }}
        remote_user: ${{ secrets.DEPLOY_USER }}
        remote_key:  ${{ secrets.DEPLOY_KEY  }}

    # 4. Cleanup & complete
    - name: Restart httpd via ssh
      run: ssh -o StrictHostKeyChecking=no -T -i ./key.txt ${{ secrets.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "sudo systemctl restart apache2"
    - name: Announce deploy
      run: echo "Deployed to ${{ env.DEPLOY_URL }}"

  run_testbed_hello:
    name: Run HelloAPI Testbed
    needs: ci_deploy
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}-test-hello
      cancel-in-progress: false

    steps:
    # 1. Local checkout 
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Get Dependencies
      uses: ./.github/actions/install_dependencies
    - name: Set up Config File
      uses: ./.github/actions/test_config
      with:
          endpoint: ${{ env.DEPLOY_URL }}
          verbose_output: "False"
    # 2. Build & configure remote environments

    # 3. Perform export
    - name: Execute testbed
      run: python -m unittest ./tests/cases/t_HelloAPI.py 
    # 4. Cleanup & complete
    - name: Announce test completed
      run: echo "Tested HelloAPI endpoint at ${{ env.DEPLOY_URL }}"
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v4
      with:
        path: ./*.log

  run_testbed_files:
    name: Run FileAPI Testbed
    needs: ci_deploy
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}-test-files
      cancel-in-progress: false

    steps:
    # 1. Local checkout 
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Get Dependencies
      uses: ./.github/actions/install_dependencies
    - name: Set up Config File
      uses: ./.github/actions/test_config
      with:
          endpoint: ${{ env.DEPLOY_URL }}
          verbose_output: "False"
    # 2. Build & configure remote environments

    # 3. Perform export
    - name: Execute testbed
      run: python -m unittest ./tests/cases/t_FileAPI.py 
    # 4. Cleanup & complete
    - name: Announce test completed
      run: echo "Tested FileAPI endpoint at ${{ env.DEPLOY_URL }}"
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v4
      with:
        path: ./*.log
