# Workflow to build and deploy designer dashboard to server.
name: OGD-Website-API Release Script
on:
  #create:
  #  tags:
  #    - '*'
  workflow_dispatch: # Allow manual trigger of this workflow from the Actions tab
  release:
    types: released

env:
  DEPLOY_HOST: ${{ vars.OGD_SERVICES_HOST }}
  DEPLOY_DIR:                               ${{ vars.API_BASE_PATH }}/files/
  DEPLOY_URL:  ${{ vars.OGD_SERVICES_HOST }}/${{ vars.API_BASE_URL }}/files/app.wsgi

jobs:
  production_deploy:
    name: Release Deploy of Website API
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
      cancel-in-progress: true

    steps:

  # 1. Local checkout & config
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Config File
      uses: ./.github/actions/web_api_config
      with:
          api_version: ${{ github.event.release.tag_name }}
          api_base: ${{ env.DEPLOY_DIR }}

  # 2. Build 

  # 3. Remote config & deploy
    - name: Install OpenConnect
      run: sudo apt-get -q update && sudo apt-get -q install openconnect
    - name: Connect VPN
      run: echo ${{ secrets.VPN_PASS }} | sudo openconnect --protocol=gp -u ${{ secrets.VPN_USER }} --passwd-on-stdin soe.vpn.wisc.edu &

    - name: Setup Access Key
      run: |
        mkdir -p ~/.ssh
        echo '${{ secrets.DEPLOY_KEY }}' >> ./key.txt
        chmod 600 ./key.txt
    - name: Ensure directory exists
      run: ssh -o StrictHostKeyChecking=no -T -i ./key.txt ${{ secrets.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "mkdir -p ${{ env.DEPLOY_DIR }}"

    - name: Upload to web server via rsync
      uses: burnett01/rsync-deployments@5.2
      with:
        switches: -vrc --delete --exclude-from 'rsync-exclude'
        path: ./src/*
        remote_path: ${{ env.DEPLOY_DIR }}
        remote_host: ${{ env.DEPLOY_HOST }}
        remote_user: ${{ secrets.DEPLOY_USER }}
        remote_key:  ${{ secrets.DEPLOY_KEY  }}

  # 4. Cleanup & complete
    - name: Restart httpd via ssh
      run: ssh -o StrictHostKeyChecking=no -T -i ./key.txt ${{ secrets.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "sudo systemctl restart apache2"

    - name: Announce deploy
      run: echo "Deployed API to ${{ env.DEPLOY_URL }}"

  run_testbed_hello:
    name: Run HelloAPI Testbed
    needs: production_deploy
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
      cancel-in-progress: true

    steps:

  # 1. Local checkout 
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Get Dependencies
      uses: ./.github/actions/install_dependencies
    - name: Set up Config File
      uses: ./.github/actions/test_config
      with:
          endpoint: ${{ env.DEPLOY_URL }}
          verbose_output: True

  # 2. Build & configure remote environments

  # 3. Perform export
    - name: Execute testbed
      run: python -m unittest ./tests/cases/t_HelloAPI.py 

  # 4. Cleanup & complete
    - name: Announce test completed
      run: echo "Tested HelloAPI endpoint at ${{ env.DEPLOY_URL }}"
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v3
      with:
        path: ./*.log
